{"version":3,"file":"static/js/5125.4e794653.chunk.js","mappings":"6OAKaA,EAAkB,SAAC,GAMzB,IALLC,EAKI,EALJA,WACAC,EAII,EAJJA,YACAC,EAGI,EAHJA,UACAC,EAEI,EAFJA,YACAC,EACI,EADJA,cAEA,OACE,SAAC,EAAAC,YAAD,CAAaL,WAAYA,EAAYC,YAAaA,EAAaC,UAAWA,EAA1E,UACE,SAAC,EAAAI,KAAD,WACGC,EAAAA,EAAAA,eAAcJ,GACX,4LADH,mIAGKK,EAAAA,EAAAA,qBAAoBJ,GAHzB,Y,+ECfF,IAAMI,EAAsB,SAAAJ,GACjC,OAAQA,GACN,IAAK,UACH,MAAO,8CAET,IAAK,cACH,MAAO,wCAET,IAAK,YACH,MAAO,oDAET,QACE,OAAO,Q,6ICTAK,EAAgB,SAACC,EAAQC,EAAIC,GACxC,MAAuBC,EAAAA,QAAAA,eAAhBC,GAAP,eAEMC,EAAY,mCAAG,oGACED,EAAa,CAAEE,KAAM,CAAEN,OAAAA,GAAUC,GAAAA,IADnC,OAEnB,QADMM,EADa,cAEnB,IAAIA,GAAAA,EAAQC,MAAMC,EAAOT,GACzBE,IAHmB,2CAAH,qDAMlB,OAAOG,GAGT,SAASI,EAAOT,GACd,OAAQA,GACN,IAAK,WACHU,EAAAA,EAAAA,cAAa,6JACb,MAEF,IAAK,eACHA,EAAAA,EAAAA,cAAa,wJACb,MAEF,IAAK,aACHA,EAAAA,EAAAA,cAAa,8FACb,MAEF,IAAK,WACHA,EAAAA,EAAAA,cAAa,uG,6JCvBNC,EAAmB,SAAC,GAAkB,IAAhBV,EAAe,EAAfA,GAAIW,EAAW,EAAXA,KAC/BlB,EAAgB,cAEtB,GAAkCmB,EAAAA,EAAAA,kBAAlC,eAAOC,EAAP,KAAeC,EAAf,KAAuBb,EAAvB,KACMG,GAAeN,EAAAA,EAAAA,eAAcL,EAAeO,GAElD,OACE,iCACE,SAAC,EAAAe,OAAD,CACEvB,aAAawB,EAAAA,EAAAA,kBAAiBL,GAC9BlB,cAAeA,EACfwB,QAASH,EACTI,KAAM,iDAGR,SAAC,EAAA9B,gBAAD,CACEC,WAAYe,EACZd,YAAauB,EACbtB,UAAWU,EACXT,YAAamB,EACblB,cAAeA,S,uLC3BhB,IAAM0B,EAAgB,SAAAR,GAAI,MAAa,YAATA,GACxBK,EAAmB,SAAAL,GAAI,MAAa,gBAATA,GAC3BS,EAAkB,SAAAT,GAAI,MAAa,cAATA,GAC1Bf,EAAgB,SAAAe,GAAI,MAAa,YAATA","sources":["module/Modal/component/ChangeTypeModal/ChangeTypeModal.jsx","module/Modal/hooks/selectCurrentAction.js","module/OptionsButton/component/hooks/useChangeType.js","module/OptionsButton/component/typeButton/InProgressButton.jsx","root/isPage.js"],"sourcesContent":["import { Text } from '../ModalWindow/ModalWindow.styled';\nimport { ModalWindow } from '../ModalWindow/ModalWindow';\nimport { isDeletedPage } from 'root/isPage';\nimport { selectCurrentAction } from 'module/Modal/hooks/selectCurrentAction';\n\nexport const ChangeTypeModal = ({\n  changeType,\n  modalIsOpen,\n  setIsOpen,\n  currentPage,\n  currentAction,\n}) => {\n  return (\n    <ModalWindow changeType={changeType} modalIsOpen={modalIsOpen} setIsOpen={setIsOpen}>\n      <Text>\n        {isDeletedPage(currentPage)\n          ? '–í–∏ –¥—ñ–π—Å–Ω–æ –±–∞–∂–∞—î—Ç–µ –≤—ñ–¥–Ω–æ–≤–∏—Ç–∏ –∑–∞—è–≤–∫—É?'\n          : ` –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∑–∞—è–≤–∫—É —É \n            ${selectCurrentAction(currentAction)}? `}\n      </Text>\n    </ModalWindow>\n  );\n};\n","export const selectCurrentAction = currentAction => {\n  switch (currentAction) {\n    case 'pending':\n      return ' –ê–ö–¢–ò–í–ù–Ü';\n\n    case 'in progress':\n      return ' –†–û–ë–û–¢–£';\n\n    case 'completed':\n      return ' –í–ò–ö–û–ù–ê–ù–Ü';\n\n    default:\n      return null;\n  }\n};\n","import { notifyChange } from 'module/Toaster/Toaster';\nimport { Request } from 'service/redux/api';\n\nexport const useChangeType = (status, id, onClose) => {\n  const [updateStatus] = Request.updateStatus();\n\n  const changeStatus = async () => {\n    const result = await updateStatus({ body: { status }, id });\n    if (result?.data) notify(status);\n    onClose();\n  };\n\n  return changeStatus;\n};\n\nfunction notify(status) {\n  switch (status) {\n    case 'pending':\n      notifyChange('–ó–∞—è–≤–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞ —É –∞–∫—Ç–∏–≤–Ω—ñ');\n      break;\n\n    case 'in progress':\n      notifyChange('–ó–∞—è–≤–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞ —É —Ä–æ–±–æ—Ç—É ');\n      break;\n\n    case 'completed':\n      notifyChange(' –ó–∞—è–≤–∫–∞ –≤–∏–∫–æ–Ω–∞!   üéâ');\n      break;\n\n    case 'deleted':\n      notifyChange(' –ó–∞—è–≤–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–∞!  ‚ùå ');\n      break;\n\n    default:\n      break;\n  }\n}\n","import { ChangeTypeModal } from 'module/Modal/component/ChangeTypeModal/ChangeTypeModal';\nimport { useToggleModal } from 'module/Modal/hooks/useToggleModal';\nimport { isInProgressPage } from 'root/isPage';\n\nimport { Button } from '../Button/Button';\nimport { useChangeType } from '../hooks/useChangeType';\n\nexport const InProgressButton = ({ id, type }) => {\n  const currentAction = 'in progress';\n\n  const [isOpen, onOpen, onClose] = useToggleModal();\n  const changeStatus = useChangeType(currentAction, id);\n\n  return (\n    <>\n      <Button\n        currentPage={isInProgressPage(type)}\n        currentAction={currentAction}\n        onClick={onOpen}\n        text={'–£ —Ä–æ–±–æ—Ç—ñ'}\n      />\n\n      <ChangeTypeModal\n        changeType={changeStatus}\n        modalIsOpen={isOpen}\n        setIsOpen={onClose}\n        currentPage={type}\n        currentAction={currentAction}\n      />\n    </>\n  );\n};\n","export const isPendingPage = type => type === 'pending';\nexport const isInProgressPage = type => type === 'in progress';\nexport const isCompletedPage = type => type === 'completed';\nexport const isDeletedPage = type => type === 'deleted';\n"],"names":["ChangeTypeModal","changeType","modalIsOpen","setIsOpen","currentPage","currentAction","ModalWindow","Text","isDeletedPage","selectCurrentAction","useChangeType","status","id","onClose","Request","updateStatus","changeStatus","body","result","data","notify","notifyChange","InProgressButton","type","useToggleModal","isOpen","onOpen","Button","isInProgressPage","onClick","text","isPendingPage","isCompletedPage"],"sourceRoot":""}