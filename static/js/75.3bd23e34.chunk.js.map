{"version":3,"file":"static/js/75.3bd23e34.chunk.js","mappings":"yMAEaA,EAAY,SAAC,GAA2C,IAAzCC,EAAwC,EAAxCA,MAAOC,EAAiC,EAAjCA,KAAMC,EAA2B,EAA3BA,YAAaC,EAAc,EAAdA,QACpD,OACE,gCACGH,IAAS,UAAC,EAAAI,MAAD,eAASJ,MACnB,SAAC,EAAAK,MAAD,CAAOJ,KAAMA,EAAMC,YAAaA,EAAaI,gBAAiBH,S,qICHvDC,EAAQG,EAAAA,GAAAA,KAAH,uPAeLF,GAAQE,EAAAA,EAAAA,IAAOC,EAAAA,IAAOC,OAAM,oBAAGC,SAAH,MAA0B,CACjEC,KAAM,OACND,cAFuC,SAGvCE,aAAc,SAHKL,CAAH,0rBAOC,YAA0B,IAAvBD,EAAsB,EAAtBA,gBACZO,EAAM,OAAGP,QAAH,IAAGA,OAAH,EAAGA,EAAiBO,OAC1BC,EAAO,OAAGR,QAAH,IAAGA,OAAH,EAAGA,EAAiBQ,QAG3BC,EAAe,sBAErB,OAAI,OAACT,QAAD,IAACA,GAAAA,EAAiBU,aAKtB,OAAIV,QAAJ,IAAIA,GAAAA,EAAiBU,aACZH,EATU,sBASYE,OAD/B,EAJkBD,GAAWD,GAAU,uBACnBE,M,wHC9BXE,EAAe,SAAC,GAAD,IAC1BC,EAD0B,EAC1BA,WAD0B,IAE1BC,KAAQlB,EAFkB,EAElBA,KAAMD,EAFY,EAEZA,MAAOoB,EAFK,EAELA,QAFK,OAI1B,UAAC,EAAAC,QAAD,YACE,SAAC,EAAAC,SAAD,CACEC,MAAOtB,EACPD,MAAOA,EACPC,KAAK,WACLuB,MAAM,QACNC,MAAO,UAGRP,IACC,SAAC,EAAAnB,UAAD,CACEE,KAAI,qBAAgBA,GACpBC,YAAakB,EAAQM,KACrBhB,SAAUU,EAAQV,aAbVT,K,gICNHoB,EAAUd,EAAAA,GAAAA,IAAH,+PAePoB,EAAYpB,EAAAA,GAAAA,KAAH,gH,8FCfTe,EAAW,SAAC,GAAD,IACtBC,EADsB,EACtBA,MACAvB,EAFsB,EAEtBA,MACAC,EAHsB,EAGtBA,KACA2B,EAJsB,EAItBA,QAJsB,IAKtBJ,MAAAA,OALsB,MAKd,OALc,EAMtBC,EANsB,EAMtBA,MACAd,EAPsB,EAOtBA,KAPsB,OAStB,UAAC,EAAAkB,cAAD,CAAeJ,MAAOA,EAAOd,KAAMA,EAAnC,WACE,SAAC,EAAAN,MAAD,CAAOM,KAAK,WAAWY,MAAOA,EAAOtB,KAAMA,EAAM2B,QAASA,KAC1D,SAAC,EAAAE,aAAD,CAAcN,MAAOA,EAAOb,KAAMA,IACjCX,O,4LCVQ6B,EAAgBtB,EAAAA,GAAAA,MAAH,gWAQf,oBAAGkB,MAAH,kBAAW,OAAX,KAKE,oBAAGA,MAAAA,OAAH,MAAW,OAAX,QAAmC,UAAVA,EAAoB,QAAUA,KAC9C,kBAAwB,WAAxB,EAAGd,KAAgC,cAAgB,SAQ5DmB,GAAevB,EAAAA,EAAAA,IAAOwB,EAAAA,IAAPxB,CAAH,uOAGH,SAAAyB,GAAI,MAAoB,UAAfA,EAAKR,MAAoB,OAAS,WAK7C,kBAAwB,WAAxB,EAAGb,KAAgC,MAAQ,UAC5C,kBAAwB,WAAxB,EAAGA,KAAgC,OAAS,SAIlDN,GAAQE,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAH,+aAUJuB,EAIEA","sources":["module/Form/component/TextInput/TextInput.jsx","module/Form/component/TextInput/TextInput.styled.jsx","module/Form/component/TypeHelpList/TypeHelpItem/TypeHelpItem.jsx","module/Form/component/TypeHelpList/TypeHelpItem/TypeHelpItem.styled.jsx","module/Utils/CheckBox/CheckBox.jsx","module/Utils/CheckBox/CheckBox.styled.jsx"],"sourcesContent":["import { Input, Label } from './TextInput.styled';\n\nexport const TextInput = ({ label, name, placeholder, options }) => {\n  return (\n    <>\n      {label && <Label> {label}</Label>}\n      <Input name={name} placeholder={placeholder} $formController={options} />\n    </>\n  );\n};\n","import styled from 'styled-components';\nimport { Field } from 'formik';\n\nexport const Label = styled.span`\n  width: 65px;\n  display: inline-block;\n  flex-shrink: 0;\n\n  @media screen and (min-width: 768px) {\n    font-size: 20px;\n    width: 120px;\n  }\n\n  @media screen and (min-width: 1024px) {\n    font-size: 12px;\n  }\n`;\n\nexport const Input = styled(Field).attrs(({ required = true }) => ({\n  type: 'text',\n  required,\n  autoComplete: 'off',\n}))`\n  width: 100%;\n  border: none;\n  border-bottom: ${({ $formController }) => {\n    const errors = $formController?.errors;\n    const touched = $formController?.touched;\n\n    const falseColor = '0.5px solid #ff0000';\n    const defaultColor = '1px solid #6b8cef6e';\n\n    if (!$formController?.isSubmitting) {\n      const inValid = touched && errors && '0.5px solid #ff0000';\n      return inValid || defaultColor;\n    }\n\n    if ($formController?.isSubmitting) {\n      return errors ? falseColor : defaultColor;\n    }\n  }};\n\n  outline: none;\n  padding: 1px 10px;\n  font-style: italic;\n\n  @media screen and (min-width: 768px) {\n    padding: 1px 20px;\n    font-size: 22px;\n  }\n\n  @media screen and (min-width: 768px) {\n    padding: 2px 20px;\n    font-size: 16px;\n  }\n\n  @media screen and (min-width: 1024px) {\n    padding: 2px 20px;\n    font-size: 14px;\n  }\n\n  &::placeholder {\n    text-align: center;\n    font-size: 10px;\n    color: var(--unactive-color-bg);\n\n    @media screen and (min-width: 768px) {\n      font-size: 15px;\n    }\n\n    @media screen and (min-width: 1024px) {\n      font-size: 12px;\n    }\n  }\n`;\n","import { TextInput } from 'module/Form/component/TextInput/TextInput';\nimport { CheckBox } from 'module/Utils/CheckBox/CheckBox';\nimport { Wrapper } from './TypeHelpItem.styled';\n\nexport const TypeHelpItem = ({\n  isSelected,\n  data: { name, label, details },\n}) => (\n  <Wrapper key={name}>\n    <CheckBox\n      value={name}\n      label={label}\n      name=\"typeHelp\"\n      theme=\"ligth\"\n      width={'160px'}\n    />\n\n    {isSelected && (\n      <TextInput\n        name={`additional.${name}`}\n        placeholder={details.view}\n        required={details.required}\n      />\n    )}\n  </Wrapper>\n);\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  height: 25px;\n  justify-content: space-between;\n\n  @media screen and (min-width: 768px) {\n    height: 40px;\n  }\n\n  @media screen and (min-width: 1024px) {\n    height: 24px;\n  }\n`;\n\nexport const ErrorText = styled.span`\n  font-size: 12px;\n  color: red;\n  position: absolute;\n  left: 150px;\n  top: 2px;\n`;\n","import { CheckBoxIcon, CheckBoxLabel, Input } from './CheckBox.styled';\n\nexport const CheckBox = ({\n  value,\n  label,\n  name,\n  onClick,\n  theme = 'dark',\n  width,\n  type,\n}) => (\n  <CheckBoxLabel width={width} type={type}>\n    <Input type=\"checkbox\" value={value} name={name} onClick={onClick} />\n    <CheckBoxIcon theme={theme} type={type} />\n    {label}\n  </CheckBoxLabel>\n);\n","import styled from 'styled-components';\nimport { Field } from 'formik';\nimport { BsCheckLg } from 'react-icons/bs';\n\nexport const CheckBoxLabel = styled.label`\n  font-size: 14px;\n  margin-right: 8px;\n\n  display: flex;\n\n  align-items: center;\n  flex-shrink: 0;\n  width: ${({ width = 'auto' }) => width};\n  cursor: pointer;\n\n  @media screen and (min-width: 768px) {\n    font-size: 22px;\n    width: ${({ width = 'auto' }) => (width === '160px' ? '260px' : width)};\n    flex-direction: ${({ type }) => (type === 'filter' ? 'row-reverse' : 'row')};\n  }\n\n  @media screen and (min-width: 1024px) {\n    font-size: 14px;\n  }\n`;\n\nexport const CheckBoxIcon = styled(BsCheckLg)`\n  color: transparent;\n  margin-right: 8px;\n  border: 1px solid ${prop => (prop.theme === 'ligth' ? 'grey' : 'white')};\n  border-radius: 3px;\n  padding: 2px;\n\n  @media screen and (min-width: 768px) {\n    margin-right: ${({ type }) => (type === 'filter' ? '0px' : '18px')};\n    margin-left: ${({ type }) => (type === 'filter' ? '18px' : '0px')};\n  }\n`;\n\nexport const Input = styled(Field)`\n  position: absolute !important;\n  clip: rect(1px 1px 1px 1px); /* IE6, IE7 */\n  padding: 0 !important;\n  border: 0 !important;\n  height: 1px !important;\n  width: 1px !important;\n  clip: rect(1px, 1px, 1px, 1px);\n  overflow: hidden;\n\n  &:focus + ${CheckBoxIcon} {\n    border: 2px solid grey;\n  }\n\n  &:checked + ${CheckBoxIcon} {\n    background-color: var(--first-color-bg);\n    color: white;\n    border: none;\n  }\n`;\n"],"names":["TextInput","label","name","placeholder","options","Label","Input","$formController","styled","Field","attrs","required","type","autoComplete","errors","touched","defaultColor","isSubmitting","TypeHelpItem","isSelected","data","details","Wrapper","CheckBox","value","theme","width","view","ErrorText","onClick","CheckBoxLabel","CheckBoxIcon","BsCheckLg","prop"],"sourceRoot":""}