{"version":3,"file":"static/js/769.b84e11bd.chunk.js","mappings":"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","sources":["module/Form/index.jsx","module/Form/service/Schema.js","module/Modal/component/ChangeTypeModal/ChangeTypeModal.jsx","module/Modal/component/CloseButton/CloseButton.jsx","module/Modal/component/DeletedModal/DeletedModal.jsx","module/Modal/component/EditModal/EditModal.jsx","module/Modal/component/EditModal/EditModal.styled.jsx","module/Modal/component/Title/Title.styled.jsx","module/Modal/hooks/selectCurrentAction.js","module/OptionsButton/component/hooks/useChangeType.js","module/OptionsButton/component/hooks/useEditRequest.js","module/OptionsButton/component/typeButton/Call.jsx","module/OptionsButton/component/typeButton/CompletedButton.jsx","module/OptionsButton/component/typeButton/DeletedButton.jsx","module/OptionsButton/component/typeButton/DeliveryButton.jsx","module/OptionsButton/component/typeButton/EditButton.jsx","module/OptionsButton/component/typeButton/InProgressButton.jsx","module/OptionsButton/component/typeButton/PendingButton.jsx","root/isPage.js"],"sourcesContent":["import { Formik } from 'formik';\nimport { useState } from 'react';\nimport {\n  Button,\n  DetailsComment,\n  TypeHelp,\n  UserData,\n  StyledFormContainer,\n} from './component';\n\nimport { RequestSchema } from './service/Schema';\n\nexport const Form = ({ onSubmit, initialValues, type, isLoading = false, onClose }) => {\n  const [isSubmitClick, setIsSubmitClick] = useState(false);\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={RequestSchema}\n      onSubmit={async (values, { resetForm }) => {\n        await onSubmit(values);\n        if (type !== 'edit') resetForm();\n        onClose && onClose();\n      }}\n    >\n      {({ values, errors, touched }) => {\n        return (\n          <StyledFormContainer type={type}>\n            <>\n              <UserData options={{ errors, touched, isSubmitting: isLoading }} />\n\n              <TypeHelp\n                isSubmitClick={isSubmitClick}\n                options={{ errors, isSubmitting: isLoading }}\n                selectedTypes={values.typeHelp}\n              />\n              <DetailsComment />\n\n              <Button\n                onClick={() => setIsSubmitClick(true)}\n                text={(() => {\n                  if (isLoading) return 'Зачекайте...';\n                  if (type !== 'edit' && !isLoading) return 'Зарегеструвати';\n                  if (type === 'edit') return 'Зберегти';\n                })()}\n              />\n            </>\n          </StyledFormContainer>\n        );\n      }}\n    </Formik>\n  );\n};\n","import * as Yup from 'yup';\n\nexport const RequestSchema = Yup.object().shape({\n  contacts: Yup.object().shape({\n    name: Yup.string()\n      .min(2, '*Занадто коротке значення')\n      .max(20, '*Дуже багато символів')\n      .required(\"*Поле являється обов'язковим\"),\n\n    tel: Yup.string()\n      .min(4, '*Занадто коротке значення')\n      .max(20, '*Дуже багато символів')\n      .required(\"*Поле являється обов'язковим\"),\n\n    adress: Yup.string()\n      .min(2, '*Занадто коротке значення')\n      .max(30, '*Дуже багато символів')\n      .required(\"*Поле являється обов'язковим\"),\n  }),\n\n  delivery: Yup.boolean(),\n  info: Yup.string(),\n\n  typeHelp: Yup.array().of(Yup.string()).min(1, '*Оберіть значення!'),\n\n  additional: Yup.object(),\n});\n","import { Text } from '../ModalWindow/ModalWindow.styled';\nimport { ModalWindow } from '../ModalWindow/ModalWindow';\nimport { isDeletedPage } from 'root/isPage';\nimport { selectCurrentAction } from 'module/Modal/hooks/selectCurrentAction';\n\nexport const ChangeTypeModal = ({\n  changeType,\n  modalIsOpen,\n  setIsOpen,\n  currentPage,\n  currentAction,\n}) => {\n  return (\n    <ModalWindow changeType={changeType} modalIsOpen={modalIsOpen} setIsOpen={setIsOpen}>\n      <Text>\n        {isDeletedPage(currentPage)\n          ? 'Ви дійсно бажаєте відновити заявку?'\n          : ` Відправити заявку у \n            ${selectCurrentAction(currentAction)}? `}\n      </Text>\n    </ModalWindow>\n  );\n};\n","import styled from 'styled-components';\n\nimport { IoIosCloseCircleOutline } from 'react-icons/io';\n\nexport const CloseButton = styled(IoIosCloseCircleOutline).attrs(prop => ({\n  type: 'button',\n}))`\n  color: #abbaf7;\n  position: absolute;\n  top: 9px;\n  right: 9px;\n  width: 30px;\n  height: 31px;\n  cursor: pointer;\n  border: none;\n  background-color: transparent;\n\n  &:hover {\n    color: #5e5e5e;\n  }\n\n  &:active {\n    background-color: #475094b8;\n  }\n\n  @media screen and (min-width: 768px) {\n    width: 45px;\n    height: 45px;\n    top: 2px;\n    right: 20px;\n  }\n\n  @media screen and (min-width: 1024px) {\n    width: 34px;\n    height: 34px;\n    top: 5px;\n    right: 19px;\n  }\n`;\n","import { ModalWindow } from '../ModalWindow/ModalWindow';\nimport { Text } from '../ModalWindow/ModalWindow.styled';\n\nexport const DeletedModal = ({\n  onChange,\n  modalIsOpen,\n  setIsOpen,\n  activeButton,\n}) => {\n  return (\n    <ModalWindow\n      changeType={onChange}\n      modalIsOpen={modalIsOpen}\n      setIsOpen={setIsOpen}\n      activeButton={activeButton}\n    >\n      <Text>Ви дійсно хочете видалити заявку?</Text>\n    </ModalWindow>\n  );\n};\n","import { Form } from 'module/Form';\nimport { CloseButton } from 'module/Modal/component/CloseButton/CloseButton';\nimport { ModalW } from 'module/Modal/component/MainElementModal/Modal';\nimport { MainSpiner } from 'module/Utils/MainSpiner/MainSpiner';\nimport { Container, EditTitle } from './EditModal.styled';\n\nexport const EditModal = ({ modalIsOpen, handleSubmit, onClose, isLoading, data }) => {\n  return (\n    <ModalW onClose={onClose} open={modalIsOpen}>\n      {isLoading && <MainSpiner />}\n\n      {!isLoading && (\n        <Container>\n          <EditTitle>Редагувати</EditTitle>\n          <CloseButton onClick={onClose} />\n\n          <Form\n            onClose={onClose}\n            onSubmit={handleSubmit}\n            initialValues={data}\n            type={'edit'}\n            isLoading={isLoading}\n          />\n        </Container>\n      )}\n    </ModalW>\n  );\n};\n","import styled from 'styled-components';\n\nimport { StyledTitle } from '../Title/Title.styled';\n\nexport const EditTitle = styled(StyledTitle)`\n  font-size: 24px;\n  padding: 12px 30px;\n\n  @media screen and (min-width: 1024px) {\n    font-size: 22px;\n    padding: 8px 30px;\n  }\n`;\n\nexport const Spiner = styled.div`\n  position: absolute;\n  top: 5px;\n  right: 15px;\n`;\n\nexport const Container = styled.div`\n  background-color: white;\n`;\n","import styled from 'styled-components';\n\nexport const StyledTitle = styled.p`\n  font-size: 20px;\n  padding: 15px 25px;\n  color: white;\n  background-color: #5b7de1;\n\n  @media screen and (min-width: 768px) {\n    font-size: 26px;\n    padding: 25px 25px;\n  }\n`;\n","export const selectCurrentAction = currentAction => {\n  switch (currentAction) {\n    case 'pending':\n      return ' АКТИВНІ';\n\n    case 'in progress':\n      return ' РОБОТУ';\n\n    case 'completed':\n      return ' ВИКОНАНІ';\n\n    default:\n      return null;\n  }\n};\n","import { notifyChange } from 'module/Toaster/Toaster';\nimport { Request } from 'service/redux/api';\n\nexport const useChangeType = (status, id, onClose) => {\n  const [updateStatus] = Request.updateStatus();\n\n  const changeStatus = async () => {\n    const result = await updateStatus({ body: { status }, id });\n    if (result?.data) notify(status);\n    onClose();\n  };\n\n  return changeStatus;\n};\n\nfunction notify(status) {\n  switch (status) {\n    case 'pending':\n      notifyChange('Заявка відправлена у активні');\n      break;\n\n    case 'in progress':\n      notifyChange('Заявка відправлена у роботу ');\n      break;\n\n    case 'completed':\n      notifyChange(' Заявка викона!   🎉');\n      break;\n\n    case 'deleted':\n      notifyChange(' Заявка видалена!  ❌ ');\n      break;\n\n    default:\n      break;\n  }\n}\n","import { useState, useEffect } from 'react';\nimport { Request } from 'service/redux/api';\n\nexport const useEditRequest = id => {\n  const [data, setData] = useState();\n\n  const [getById, { isLoading: isLoadingGetById }] = Request.getById();\n  const [update, { isLoading: isLoadingUpdate }] = Request.update();\n\n  const openModal = async onOpen => {\n    onOpen();\n    const result = await getById(id);\n\n    setData(result?.data?.data);\n  };\n\n  const editRequest = async val => {\n    const res = await update(val);\n\n    if (res) setData(res.data);\n  };\n\n  useEffect(() => {\n    const initialValues = async () => {\n      const result = await getById(id);\n\n      setData(result?.data?.data);\n    };\n\n    initialValues();\n  }, [getById, id]);\n\n  return {\n    openModal,\n    isLoading: isLoadingGetById || isLoadingUpdate,\n    data,\n    editRequest,\n  };\n};\n","import { Button } from '../Button/Button';\n\nexport const CallButton = ({ tel }) => (\n  <Button data={tel} text={'Дзвінок'} currentAction={'call'} />\n);\n","import { Button } from '../Button/Button';\nimport { isCompletedPage } from 'root/isPage';\nimport { ChangeTypeModal } from 'module/Modal/component/ChangeTypeModal/ChangeTypeModal';\nimport { useToggleModal } from 'module/Modal/hooks/useToggleModal';\nimport { useChangeType } from '../hooks/useChangeType';\n\nexport const CompletedButton = ({ id, type }) => {\n  const currentAction = 'completed';\n\n  const [isOpen, onOpen, onClose] = useToggleModal();\n  const changeStatus = useChangeType(currentAction, id, onClose);\n\n  return (\n    <>\n      <Button\n        currentPage={isCompletedPage(type)}\n        currentAction={currentAction}\n        onClick={onOpen}\n        text={'Заявка виконана'}\n      />\n\n      <ChangeTypeModal\n        changeType={changeStatus}\n        modalIsOpen={isOpen}\n        setIsOpen={onClose}\n        currentPage={type}\n        currentAction={currentAction}\n      />\n    </>\n  );\n};\n","import { DeletedModal } from 'module/Modal/component/DeletedModal/DeletedModal';\nimport { useToggleModal } from 'module/Modal/hooks/useToggleModal';\nimport { isDeletedPage } from 'root/isPage';\n\nimport { Button } from '../Button/Button';\nimport { useChangeType } from '../hooks/useChangeType';\n\nexport const DeletedButton = ({ type, id }) => {\n  const currentAction = 'deleted';\n\n  const [isOpen, onOpen, onClose] = useToggleModal();\n  const changeStatus = useChangeType(currentAction, id, onClose);\n\n  return (\n    <>\n      <Button\n        currentPage={isDeletedPage(type)}\n        currentAction={currentAction}\n        onClick={onOpen}\n        text={'Видалити'}\n      />\n\n      <DeletedModal\n        onChange={changeStatus}\n        modalIsOpen={isOpen}\n        setIsOpen={onClose}\n        activeButton={'right'}\n      />\n    </>\n  );\n};\n","import { Button } from '../Button/Button';\n\nexport const DeliveryButton = ({ delivery }) => (\n  <Button\n    currentAction={'delivery'}\n    data={delivery}\n    text={delivery ? 'Потрібна доставка' : 'Доставка непотрібна'}\n  />\n);\n","import { EditModal } from 'module/Modal/component/EditModal/EditModal';\nimport { useToggleModal } from 'module/Modal/hooks/useToggleModal';\nimport { Button } from '../Button/Button';\nimport { useEditRequest } from '../hooks/useEditRequest';\n\nexport const EditButton = ({ id }) => {\n  const [isOpen, onOpen, onClose] = useToggleModal();\n  const { openModal, editRequest, isLoading, data } = useEditRequest(id);\n\n  const handleSubmit = async value => {\n    await editRequest(value);\n  };\n\n  return (\n    <>\n      <Button\n        currentAction={'edit'}\n        onClick={async () => await openModal(onOpen)}\n        text={'Редагувати'}\n      />\n      <EditModal\n        modalIsOpen={isOpen}\n        onClose={() => onClose(false)}\n        id={id}\n        handleSubmit={handleSubmit}\n        isLoading={isLoading}\n        data={data}\n      />\n    </>\n  );\n};\n","import { ChangeTypeModal } from 'module/Modal/component/ChangeTypeModal/ChangeTypeModal';\nimport { useToggleModal } from 'module/Modal/hooks/useToggleModal';\nimport { isInProgressPage } from 'root/isPage';\n\nimport { Button } from '../Button/Button';\nimport { useChangeType } from '../hooks/useChangeType';\n\nexport const InProgressButton = ({ id, type }) => {\n  const currentAction = 'in progress';\n\n  const [isOpen, onOpen, onClose] = useToggleModal();\n  const changeStatus = useChangeType(currentAction, id);\n\n  return (\n    <>\n      <Button\n        currentPage={isInProgressPage(type)}\n        currentAction={currentAction}\n        onClick={onOpen}\n        text={'У роботі'}\n      />\n\n      <ChangeTypeModal\n        changeType={changeStatus}\n        modalIsOpen={isOpen}\n        setIsOpen={onClose}\n        currentPage={type}\n        currentAction={currentAction}\n      />\n    </>\n  );\n};\n","import { ChangeTypeModal } from 'module/Modal/component/ChangeTypeModal/ChangeTypeModal';\nimport { useToggleModal } from 'module/Modal/hooks/useToggleModal';\n\nimport { isPendingPage } from 'root/isPage';\n\nimport { Button } from '../Button/Button';\nimport { useChangeType } from '../hooks/useChangeType';\n\nexport const PendingButton = ({ id, type }) => {\n  const currentAction = 'pending';\n\n  const [isOpen, onOpen, onClose] = useToggleModal();\n  const changeStatus = useChangeType(currentAction, id);\n\n  return (\n    <>\n      <Button\n        currentPage={isPendingPage(type)}\n        currentAction={currentAction}\n        onClick={onOpen}\n        text={'Активні'}\n      />\n\n      <ChangeTypeModal\n        changeType={changeStatus}\n        modalIsOpen={isOpen}\n        setIsOpen={onClose}\n        currentPage={type}\n        currentAction={currentAction}\n      />\n    </>\n  );\n};\n","export const isPendingPage = type => type === 'pending';\nexport const isInProgressPage = type => type === 'in progress';\nexport const isCompletedPage = type => type === 'completed';\nexport const isDeletedPage = type => type === 'deleted';\n"],"names":["Form","onSubmit","initialValues","type","isLoading","onClose","useState","isSubmitClick","setIsSubmitClick","validationSchema","RequestSchema","values","resetForm","errors","touched","StyledFormContainer","UserData","options","isSubmitting","TypeHelp","selectedTypes","typeHelp","DetailsComment","Button","onClick","text","Yup","shape","contacts","name","min","max","required","tel","adress","delivery","info","of","additional","ChangeTypeModal","changeType","modalIsOpen","setIsOpen","currentPage","currentAction","ModalWindow","Text","isDeletedPage","selectCurrentAction","CloseButton","styled","IoIosCloseCircleOutline","attrs","prop","DeletedModal","onChange","activeButton","EditModal","handleSubmit","data","ModalW","open","MainSpiner","Container","EditTitle","StyledTitle","Spiner","useChangeType","status","id","Request","updateStatus","changeStatus","body","result","notify","notifyChange","useEditRequest","setData","getById","isLoadingGetById","update","isLoadingUpdate","openModal","onOpen","editRequest","val","res","useEffect","CallButton","CompletedButton","useToggleModal","isOpen","isCompletedPage","DeletedButton","DeliveryButton","EditButton","value","InProgressButton","isInProgressPage","PendingButton","isPendingPage"],"sourceRoot":""}