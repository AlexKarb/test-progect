{"version":3,"file":"static/js/6302.c5024124.chunk.js","mappings":"4LAIe,SAASA,EAAmBC,GACzC,OCJa,SAA4BA,GACzC,GAAIC,MAAMC,QAAQF,GAAM,OAAO,EAAAG,EAAA,GAAiBH,GDGzC,CAAkBA,IELZ,SAA0BI,GACvC,GAAsB,qBAAXC,QAAmD,MAAzBD,EAAKC,OAAOC,WAA2C,MAAtBF,EAAK,cAAuB,OAAOH,MAAMM,KAAKH,GFInF,CAAgBJ,KAAQ,EAAAQ,EAAA,GAA2BR,IGLvE,WACb,MAAM,IAAIS,UAAU,wIHIwE,G,0BIHjFC,EAAkB,WAC7B,OAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KAYA,MAAO,CAACD,EAVa,SAACE,GAAyC,IAAlCC,EAAiC,uDAAxB,CAAEC,UAAU,GAC1CC,EAAYL,EAAOM,MAAK,SAAAC,GAAW,OAAIA,IAAgBL,KACzDC,EAAOC,UAAYC,EACrBJ,GAAU,SAAAO,GAAG,OAAIA,EAAIR,QAAO,SAAAO,GAAW,OAAIA,IAAgBL,QAG3DD,GAAU,SAAAO,GAAG,kBAAQA,GAAR,CAAaN","sources":["../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","module/Filter/hooks/useToggleFilter.js"],"sourcesContent":["import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import { useState } from 'react';\n\nexport const useToggleFilter = () => {\n  const [filter, setFilter] = useState([]);\n\n  const toggleFilter = (value, action = { deleting: false }) => {\n    const haveMatch = filter.find(filterValue => filterValue === value);\n    if (action.deleting || haveMatch) {\n      setFilter(prS => prS.filter(filterValue => filterValue !== value));\n      return;\n    } else {\n      setFilter(prS => [...prS, value]);\n    }\n  };\n\n  return [filter, toggleFilter];\n};\n"],"names":["_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","from","unsupportedIterableToArray","TypeError","useToggleFilter","useState","filter","setFilter","value","action","deleting","haveMatch","find","filterValue","prS"],"sourceRoot":""}